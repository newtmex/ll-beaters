/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    FakeAirnodeRrpV0: {
      address: "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "airnode",
              type: "address",
            },
            {
              internalType: "bytes32",
              name: "endpointId",
              type: "bytes32",
            },
            {
              internalType: "address",
              name: "sponsor",
              type: "address",
            },
            {
              internalType: "address",
              name: "sponsorWallet",
              type: "address",
            },
            {
              internalType: "address",
              name: "fulfillAddress",
              type: "address",
            },
            {
              internalType: "bytes4",
              name: "fulfillFunctionId",
              type: "bytes4",
            },
            {
              internalType: "bytes",
              name: "parameters",
              type: "bytes",
            },
          ],
          name: "makeFullRequest",
          outputs: [
            {
              internalType: "bytes32",
              name: "requestId",
              type: "bytes32",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_a",
              type: "address",
            },
            {
              internalType: "bool",
              name: "_b",
              type: "bool",
            },
          ],
          name: "setSponsorshipStatus",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
    FakeBeaters: {
      address: "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_airnodeRrp",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "_epochLength",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          name: "OwnableInvalidOwner",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          name: "OwnableUnauthorizedAccount",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "previousOwner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "OwnershipTransferred",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "requestId",
              type: "bytes32",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "response",
              type: "uint256",
            },
          ],
          name: "ReceivedUint256",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "requestId",
              type: "bytes32",
            },
            {
              indexed: false,
              internalType: "uint256[]",
              name: "response",
              type: "uint256[]",
            },
          ],
          name: "ReceivedUint256Array",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "requestId",
              type: "bytes32",
            },
          ],
          name: "RequestedUint256",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "requestId",
              type: "bytes32",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "size",
              type: "uint256",
            },
          ],
          name: "RequestedUint256Array",
          type: "event",
        },
        {
          inputs: [],
          name: "_pendingTotalStake",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "_totalMint",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "_totalMintForHouse",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "_totalStake",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "memId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "famId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "refId",
              type: "uint256",
            },
          ],
          name: "addStake",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [],
          name: "airnode",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "airnodeRrp",
          outputs: [
            {
              internalType: "contract IAirnodeRrpV0",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "beat_addr",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "famId",
              type: "uint256",
            },
          ],
          name: "claimFamilyWinnings",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "memId",
              type: "uint256",
            },
          ],
          name: "claimMemberWinnings",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "requestId",
              type: "bytes32",
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
          ],
          name: "completeComputeWin",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "computeWin",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "endpointIdUint256Array",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "epochLength",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          name: "expectingRequestWithIdToBeFulfilled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "requestId",
              type: "bytes32",
            },
            {
              internalType: "uint256[]",
              name: "qrngUint256Array",
              type: "uint256[]",
            },
          ],
          name: "fakeCompleteComputeWin",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "famMintCost",
          outputs: [
            {
              internalType: "uint256",
              name: "cost",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "famSwitchCost",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "fam_addr",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "famId",
              type: "uint256",
            },
          ],
          name: "familyProps",
          outputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "id",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "totalStakeWeight",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "ownerShare",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "membersShare",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "rps",
                  type: "uint256",
                },
              ],
              internalType: "struct Beaters.FamilyProps",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "user",
              type: "address",
            },
          ],
          name: "getRefId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "user",
              type: "address",
            },
          ],
          name: "getUserId",
          outputs: [
            {
              internalType: "uint256",
              name: "userId",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "user",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amt",
              type: "uint256",
            },
          ],
          name: "giveUserBeat",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "mem_addr",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "memId",
              type: "uint256",
            },
          ],
          name: "memberProps",
          outputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "totalStake",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "activePeriods",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "lastActivePeriod",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "stakeWeight",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "famId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "rps",
                  type: "uint256",
                },
              ],
              internalType: "struct Beaters.MemberProps",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "minStake",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "mintFamily",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "mintLeft",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "user",
              type: "address",
            },
          ],
          name: "referredBy",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "renounceOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_airnode",
              type: "address",
            },
            {
              internalType: "bytes32",
              name: "_endpointIdUint256Array",
              type: "bytes32",
            },
            {
              internalType: "address",
              name: "_sponsorWallet",
              type: "address",
            },
          ],
          name: "setRequestParameters",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "sponsorWallet",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "stakeLeft",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "transferOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "beatAmt",
              type: "uint256",
            },
          ],
          name: "widthdrawStake",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {
        _pendingTotalStake: "contracts/Beaters.sol",
        _totalMint: "contracts/Beaters.sol",
        _totalMintForHouse: "contracts/Beaters.sol",
        _totalStake: "contracts/Beaters.sol",
        addStake: "contracts/Beaters.sol",
        airnode: "contracts/Beaters.sol",
        airnodeRrp: "contracts/Beaters.sol",
        beat_addr: "contracts/Beaters.sol",
        claimFamilyWinnings: "contracts/Beaters.sol",
        claimMemberWinnings: "contracts/Beaters.sol",
        completeComputeWin: "contracts/Beaters.sol",
        computeWin: "contracts/Beaters.sol",
        endpointIdUint256Array: "contracts/Beaters.sol",
        epochLength: "contracts/Beaters.sol",
        expectingRequestWithIdToBeFulfilled: "contracts/Beaters.sol",
        famMintCost: "contracts/Beaters.sol",
        famSwitchCost: "contracts/Beaters.sol",
        fam_addr: "contracts/Beaters.sol",
        familyProps: "contracts/Beaters.sol",
        getRefId: "contracts/Beaters.sol",
        getUserId: "contracts/Beaters.sol",
        mem_addr: "contracts/Beaters.sol",
        memberProps: "contracts/Beaters.sol",
        minStake: "contracts/Beaters.sol",
        mintFamily: "contracts/Beaters.sol",
        mintLeft: "contracts/Beaters.sol",
        owner: "contracts/Beaters.sol",
        referredBy: "contracts/Beaters.sol",
        renounceOwnership: "contracts/Beaters.sol",
        setRequestParameters: "contracts/Beaters.sol",
        sponsorWallet: "contracts/Beaters.sol",
        stakeLeft: "contracts/Beaters.sol",
        transferOwnership: "contracts/Beaters.sol",
        widthdrawStake: "contracts/Beaters.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
